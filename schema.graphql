# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = I18NLocale | Song | SongAggregator | SongConnection | SongConnectionAdded | SongConnectionCode | SongConnectionCreatedAt | SongConnectionDescription | SongConnectionId | SongConnectionOriginal_date | SongConnectionPublished_at | SongConnectionTitle | SongConnectionUpdatedAt | SongConnection_id | SongGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createRolePayload | createSongPayload | createUserPayload | deleteFilePayload | deleteRolePayload | deleteSongPayload | deleteUserPayload | updateRolePayload | updateSongPayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type I18NLocale {
    _id: ID!
    code: String
    createdAt: DateTime!
    id: ID!
    name: String
    updatedAt: DateTime!
}

type Mutation {
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    createSong(input: createSongInput): createSongPayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    deleteSong(input: deleteSongInput): deleteSongPayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    updateSong(input: updateSongInput): updateSongPayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Query {
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    song(id: ID!, publicationState: PublicationState): Song
    songs(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Song]
    songsConnection(limit: Int, sort: String, start: Int, where: JSON): SongConnection
    songsCount(where: JSON): Int!
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Song {
    _id: ID!
    added: Date!
    code: String!
    createdAt: DateTime!
    description: String
    id: ID!
    original_date: Date
    published_at: DateTime
    title: String!
    updatedAt: DateTime!
}

type SongAggregator {
    count: Int
    totalCount: Int
}

type SongConnection {
    aggregate: SongAggregator
    groupBy: SongGroupBy
    values: [Song]
}

type SongConnectionAdded {
    connection: SongConnection
    key: ID
}

type SongConnectionCode {
    connection: SongConnection
    key: String
}

type SongConnectionCreatedAt {
    connection: SongConnection
    key: DateTime
}

type SongConnectionDescription {
    connection: SongConnection
    key: String
}

type SongConnectionId {
    connection: SongConnection
    key: ID
}

type SongConnectionOriginal_date {
    connection: SongConnection
    key: ID
}

type SongConnectionPublished_at {
    connection: SongConnection
    key: DateTime
}

type SongConnectionTitle {
    connection: SongConnection
    key: String
}

type SongConnectionUpdatedAt {
    connection: SongConnection
    key: DateTime
}

type SongConnection_id {
    connection: SongConnection
    key: ID
}

type SongGroupBy {
    _id: [SongConnection_id]
    added: [SongConnectionAdded]
    code: [SongConnectionCode]
    createdAt: [SongConnectionCreatedAt]
    description: [SongConnectionDescription]
    id: [SongConnectionId]
    original_date: [SongConnectionOriginal_date]
    published_at: [SongConnectionPublished_at]
    title: [SongConnectionTitle]
    updatedAt: [SongConnectionUpdatedAt]
}

type UploadFile {
    _id: ID!
    alternativeText: String
    caption: String
    createdAt: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updatedAt: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnection_id {
    connection: UploadFileConnection
    key: ID
}

type UploadFileGroupBy {
    _id: [UploadFileConnection_id]
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    createdAt: [UploadFileConnectionCreatedAt]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updatedAt: [UploadFileConnectionUpdatedAt]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    _id: ID!
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    _id: ID!
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnection_id {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleGroupBy {
    _id: [UsersPermissionsRoleConnection_id]
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    _id: ID!
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updatedAt: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnection_id {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserGroupBy {
    _id: [UsersPermissionsUserConnection_id]
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    createdAt: [UsersPermissionsUserConnectionCreatedAt]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
    username: [UsersPermissionsUserConnectionUsername]
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createSongPayload {
    song: Song
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteFilePayload {
    file: UploadFile
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteSongPayload {
    song: Song
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateSongPayload {
    song: Song
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum PublicationState {
    LIVE
    PREVIEW
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input LocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input SongInput {
    added: Date!
    code: String!
    created_by: ID
    description: String
    original_date: Date
    published_at: DateTime
    title: String!
    updated_by: ID
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createRoleInput {
    data: RoleInput
}

input createSongInput {
    data: SongInput
}

input createUserInput {
    data: UserInput
}

input deleteFileInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteSongInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editLocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editSongInput {
    added: Date
    code: String
    created_by: ID
    description: String
    original_date: Date
    published_at: DateTime
    title: String
    updated_by: ID
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateSongInput {
    data: editSongInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
